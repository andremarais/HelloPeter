hp.monthly <- count(hp.df, c('post.date','type'))
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date, y = freq, col = type), stat = "bin")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date, y = freq, col = type), stat = "identity")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, col = type), stat = "identity")
hp.monthly
hp.monthly <- count(hp.df, c('post.date.month','type'))
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, col = type), stat = "identity")
hp.monthly
hp.df$post.date.month
hp.df$post.date.month <- format(hp.df$post.date, format = "%Y-%b")
hp.monthly <- count(hp.df, c('post.date.month','type'))
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, col = type), stat = "identity")
hp.df$post.date.month <- format(hp.df$post.date, format = "%Y-%M")
hp.monthly <- count(hp.df, c('post.date.month','type'))
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, col = type), stat = "identity")
hp.df$post.date.month <- format(hp.df$post.date, format = "%Y-%m")
hp.monthly <- count(hp.df, c('post.date.month','type'))
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, col = type), stat = "identity")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity")
str(hp.df)
ggplot() + geom_line(data = hp.df, aes(x = post.date, y = .count.))
ggplot() + geom_line(data = hp.df, aes(x = post.date, y = ..count.))
ggplot() + geom_line(data = hp.df, aes(x = post.date, y = ..count))
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = ..count), stat = "identity")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = .count.), stat = "identity")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = ..count..), stat = "identity")
p <- ggplot(mpg, aes(x=factor(cyl), y=..count..))
p
p + geom_histogram()
p + stat_summary(fun.y=identity, geom='bar')
p + geom_bar(stat="bin")
hp.count <- count(hp.df, c('post.date', 'type'))
str(hp.count)
ggplot() + geom_line(data = hp.count, aes(x = post.date, y = freq))
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = ..count..), stat = "identity")
hp.monthly <- count(hp.df, c('post.date.month','type'))
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity")
hp.count
hp.df
aggregate(data = hp.df, response.time ~ post.date.month, FUN = ave)
ave.time.pm <- aggregate(data = hp.df, response.time ~ post.date.month, FUN = ave)
plot(ave.time.pm)
str(ave.time.pm)
ave.time.pm <- aggregate(data = hp.df, response.time ~ post.date.month, FUN = sum)
ave.time.pm
ave.time.pm <- aggregate(data = hp.df, response.time ~ post.date.month, FUN = mean)
ave.time.pm
plot(ave.time.pm)
str(ave.time.pm$response.time)
plot(ave.time.pm$response.time)
str(ave.time.pm)
ggplot() + geom_bar(data = ave.time.pm, aes(x = post.date.month, y = response.time), stat = "identity")
str(hp.monthly)
ggplot() + geom_bar(data = ave.time.pm, aes(x = post.date.month, y = response.time), stat = "bin")
str(ave.tim)
str(ave.time.pm)
ggplot() + geom_bar(data = ave.time.pm, aes(x = post.date.month, y = as.numeric(response.time)), stat = "bin")
ggplot() + geom_bar(data = ave.time.pm, aes(x = post.date.month, y = as.numeric(response.time)), stat = "identity")
ggplot() + geom_line(data = ave.time.pm, aes(x = post.date.month, y = as.numeric(response.time)))
identity
ggplot() + geom_bar(data = ave.time.pm, aes(x = post.date.month, y = as.numeric(response.time)), stat = "identity")
ggplot() + geom_bar(data = ave.time.pm, aes(x = post.date.month, y = as.numeric(response.time), fill = as.numeric(response.time)), stat = "identity")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = freq), stat = "identity")
?geom_bar
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = freq), stat = "identity", position = "dodge")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = freq, position = "dodge"), stat = "identity")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = freq), stat = "identity")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = freq), stat = "identity", position = "stack")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = freq), stat = "identity", position = "dodge")
ggplot(data = hp.monthly, aes(x = post.date.month, y = freq, fill = freq)) + geom_bar(stat = "identity", position = "dodge")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")+ scale_fill_brewer()
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")+ scale_fill_brewer("Set2")
ggplot() +
geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")+
scale_fill_brewer(palette = "Set2")
ggplot() +
geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")+
scale_fill_brewer(palette = "Set3")
ggplot() +
geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")+
scale_fill_brewer(palette = "Spectral")
scale_fill_brewer(palette = "paired")
ggplot() +
geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")+
scale_fill_brewer(palette = "Paired")
scale_fill_brewer(palette = "Set1")
ggplot() +
geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")+
scale_fill_brewer(palette = "Set1")
ggplot() + geom_bar(data = ave.time.pm, aes(x = post.date.month, y = as.numeric(response.time), fill = as.numeric(response.time)), stat = "identity")
ggplot() +
geom_bar(data = ave.time.pm, aes(x = post.date.month, y = as.numeric(response.time), fill = as.numeric(response.time)), stat = "identity")+
scale_fill_brewer(palette = "Set1")
ggplot() +
geom_bar(data = ave.time.pm, aes(x = post.date.month, y = as.numeric(response.time), fill = as.numeric(response.time)), stat = "identity")+
scale_fill_brewer(palette = "Blues")
geom_bar(data = ave.time.pm, aes(x = post.date.month, y = as.numeric(response.time), fill = as.numeric(response.time)), stat = "identity")
ggplot() +
geom_bar(data = ave.time.pm, aes(x = post.date.month, y = as.numeric(response.time), fill = as.numeric(response.time)), stat = "identity")
shiny::runApp('GitHub/HelloPeter/shiny')
shiny::runApp('GitHub/HelloPeter/shiny')
shiny::runApp('GitHub/HelloPeter/shiny')
setwd("C:/Users/Veldrin/Documents/GitHub/HelloPeter/shiny")
Mom <- readRDS(file.path(getwd(),"data/Momentum.RDS"))
MomHealth <- readRDS(file.path(getwd(),"data/Momentum Health.RDS"))
MSTI <- readRDS(file.path(getwd(),"data/Momentum Short Term.RDS"))
DiscHealth <- readRDS(file.path(getwd(),"data/Discovery Health.RDS"))
DiscLife <- readRDS(file.path(getwd(),"data/Discovery Life.RDS"))
DiscInsure <- readRDS(file.path(getwd(),"data/Discovery Insure.RDS"))
Liberty <- readRDS(file.path(getwd(),"data/Liberty.RDS"))
Metropolitan <- readRDS(file.path(getwd(),"data/Metropolitan.RDS"))
OutSurance <- readRDS(file.path(getwd(),"data/OutSurance.RDS"))
#MiWay <- readRDS(file.path(getwd(),"data/MiWay.RDS"))
#setwd("C:/Users/Veldrin/Documents/GitHub/HelloPeter/shiny")
HP.data <- rbind(Mom,
MomHealth,
MSTI,
DiscHealth,
DiscLife,
DiscInsure,
Liberty,
Metropolitan,
OutSurance)
HP.data$response.date <- as.POSIXct.numeric(HP.data$response.date, format = "%Y-%m-%d", origin = "1970-01-01", tz = "GMT")
HP.data$post.date <- as.POSIXct.numeric(HP.data$post.date, format = "%Y-%m-%d", origin = "1970-01-01", tz = "GMT")
HP.data$response.delay <- round(difftime(HP.data$response.date,
HP.data$post.date,
units = "hours",
tz = "GMT"),4)
Mom <- readRDS(file.path(getwd(),"data/Momentum.RDS"))
MomHealth <- readRDS(file.path(getwd(),"data/Momentum Health.RDS"))
MSTI <- readRDS(file.path(getwd(),"data/Momentum Short Term.RDS"))
DiscHealth <- readRDS(file.path(getwd(),"data/Discovery Health.RDS"))
DiscLife <- readRDS(file.path(getwd(),"data/Discovery Life.RDS"))
DiscInsure <- readRDS(file.path(getwd(),"data/Discovery Insure.RDS"))
Liberty <- readRDS(file.path(getwd(),"data/Liberty.RDS"))
Metropolitan <- readRDS(file.path(getwd(),"data/Metropolitan.RDS"))
OutSurance <- readRDS(file.path(getwd(),"data/OutSurance.RDS"))
#MiWay <- readRDS(file.path(getwd(),"data/MiWay.RDS"))
#setwd("C:/Users/Veldrin/Documents/GitHub/HelloPeter/shiny")
HP.data <- rbind(Mom,
MomHealth,
MSTI,
DiscHealth,
DiscLife,
DiscInsure,
Liberty,
Metropolitan,
OutSurance)
HP.data$response.date <- as.POSIXct.numeric(HP.data$response.date, origin = "1970-01-01", tz = "GMT")
response.date
HP.data$response.date
Mom <- readRDS(file.path(getwd(),"data/Momentum.RDS"))
MomHealth <- readRDS(file.path(getwd(),"data/Momentum Health.RDS"))
MSTI <- readRDS(file.path(getwd(),"data/Momentum Short Term.RDS"))
DiscHealth <- readRDS(file.path(getwd(),"data/Discovery Health.RDS"))
DiscLife <- readRDS(file.path(getwd(),"data/Discovery Life.RDS"))
DiscInsure <- readRDS(file.path(getwd(),"data/Discovery Insure.RDS"))
Liberty <- readRDS(file.path(getwd(),"data/Liberty.RDS"))
Metropolitan <- readRDS(file.path(getwd(),"data/Metropolitan.RDS"))
OutSurance <- readRDS(file.path(getwd(),"data/OutSurance.RDS"))
#MiWay <- readRDS(file.path(getwd(),"data/MiWay.RDS"))
#setwd("C:/Users/Veldrin/Documents/GitHub/HelloPeter/shiny")
HP.data <- rbind(Mom,
MomHealth,
MSTI,
DiscHealth,
DiscLife,
DiscInsure,
Liberty,
Metropolitan,
OutSurance)
HP.data$response.date <- as.POSIXct.numeric(HP.data$response.date, origin = "1970-01-01", tz = "GMT")
HP.data$post.date <- as.POSIXct.numeric(HP.data$post.date, origin = "1970-01-01", tz = "GMT")
HP.data$response.delay <- round(difftime(HP.data$response.date,
HP.data$post.date,
units = "hours",
tz = "GMT"),4)
gc()
shiny::runApp()
Mom <- readRDS(file.path(getwd(),"data/Momentum.RDS"))
MomHealth <- readRDS(file.path(getwd(),"data/Momentum Health.RDS"))
MSTI <- readRDS(file.path(getwd(),"data/Momentum Short Term.RDS"))
DiscHealth <- readRDS(file.path(getwd(),"data/Discovery Health.RDS"))
DiscLife <- readRDS(file.path(getwd(),"data/Discovery Life.RDS"))
DiscInsure <- readRDS(file.path(getwd(),"data/Discovery Insure.RDS"))
Liberty <- readRDS(file.path(getwd(),"data/Liberty.RDS"))
Metropolitan <- readRDS(file.path(getwd(),"data/Metropolitan.RDS"))
OutSurance <- readRDS(file.path(getwd(),"data/OutSurance.RDS"))
#MiWay <- readRDS(file.path(getwd(),"data/MiWay.RDS"))
#setwd("C:/Users/Veldrin/Documents/GitHub/HelloPeter/shiny")
HP.data <- rbind(Mom,
MomHealth,
MSTI,
DiscHealth,
DiscLife,
DiscInsure,
Liberty,
Metropolitan,
OutSurance)
HP.data$response.date
HP.data$response.date <- as.POSIXct.numeric(HP.data$response.date, origin = "1970-01-01", tz = "GMT")
HP.data$post.date <- as.POSIXct.numeric(HP.data$post.date, origin = "1970-01-01", tz = "GMT")
complaints <- function(hp.df, insurer) {
hp.df <- hp.df[which(hp.df$Insurer == insurer),]
hp.df <- hp.df[which(hp.df$post.date < paste(substring(as.character(Sys.Date()), 1, 7), "01", sep = "-" )),]
not.zero <- which(hp.df$response.date != 0)
hp.df$post.date.month <- as.Date(paste(substring(as.character(hp.df$post.date), 1, 7), "01", sep = "-" ))
ave.time.pm <- data.frame(aggregate(data = hp.df, response.delay ~ post.date.month, FUN = mean))
ave.time.pm$response.delay <- as.numeric(ave.time.pm$response.delay)
ave.time.pm$post.date.month <- as.Date(ave.time.pm$post.date.month )
time.plot <- ggplot(data = ave.time.pm, aes(x = post.date.month, y = response.delay, fill = response.delay)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9)) +
ggtitle(paste(as.character(unique(hp.df$Insurer.proper.name)), "turaround time")) +
xlab("Date") +
ylab("Hours")
#   download.time.data <<- ave.time.pm
#   download.time.plot <<- time.plot
return(time.plot)
}
complaints(HP.data, "MSTI")
Mom <- readRDS(file.path(getwd(),"data/Momentum.RDS"))
MomHealth <- readRDS(file.path(getwd(),"data/Momentum Health.RDS"))
MSTI <- readRDS(file.path(getwd(),"data/Momentum Short Term.RDS"))
DiscHealth <- readRDS(file.path(getwd(),"data/Discovery Health.RDS"))
DiscLife <- readRDS(file.path(getwd(),"data/Discovery Life.RDS"))
DiscInsure <- readRDS(file.path(getwd(),"data/Discovery Insure.RDS"))
Liberty <- readRDS(file.path(getwd(),"data/Liberty.RDS"))
Metropolitan <- readRDS(file.path(getwd(),"data/Metropolitan.RDS"))
OutSurance <- readRDS(file.path(getwd(),"data/OutSurance.RDS"))
#MiWay <- readRDS(file.path(getwd(),"data/MiWay.RDS"))
#setwd("C:/Users/Veldrin/Documents/GitHub/HelloPeter/shiny")
HP.data <- rbind(Mom,
MomHealth,
MSTI,
DiscHealth,
DiscLife,
DiscInsure,
Liberty,
Metropolitan,
OutSurance)
HP.data$response.date <- as.POSIXct.numeric(HP.data$response.date, origin = "1970-01-01", tz = "GMT")
HP.data$post.date <- as.POSIXct.numeric(HP.data$post.date, origin = "1970-01-01", tz = "GMT")
HP.data$response.delay <- round(difftime(HP.data$response.date,
HP.data$post.date,
units = "hours",
tz = "GMT"),4)
complaints(HP.data, "MSTI")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
hp.df <- HP.data
count(hp.df, c('post.date.month','type'))
hp.df$post.date.month <- as.Date(paste(substring(as.character(hp.df$post.date), 1, 7), "01", sep = "-" ))
count(hp.df, c('post.date.month','type'))
hp.monthly <- count(hp.df, c('post.date.month','type'))
ggplot()+
geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")+
scale_fill_brewer(palette = "Set1")+
theme(axis.text.x = element_text(angle = 45))+
ggtitle(paste(p.name, " compliments, complaints and conversions"))+
xlab("Date") +
ylab("Frequency")
posts <- function(hp.df, insurer) {
hp.df <- hp.df[which(hp.df$Insurer == insurer),]
hp.df$post.date.month <- as.Date(paste(substring(as.character(hp.df$post.date), 1, 7), "01", sep = "-" ))
hp.monthly <- count(hp.df, c('post.date.month','type'))
post.plot <- ggplot()+
geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")+
scale_fill_brewer(palette = "Set1")+
theme(axis.text.x = element_text(angle = 45))+
ggtitle(paste(as.character(unique(hp.df$Insurer.proper.name)), " compliments, complaints and conversions"))+
xlab("Date") +
ylab("Frequency")
download.post.data <<- hp.monthly
download.post.plot <<- post.plot
return(post.plot)
}
posts(HP.data, "Mom")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
nature <- function(hp.df, plot.month, nature) {
hp.df <- hp.df[which(hp.df$Insurer == insurer),]
hp.df$post.date.month <- as.Date(paste(substring(as.character(hp.df$post.date), 1, 7), "01", sep = "-" ))
hp.df <- hp.df[which(hp.df$type == nature),]
nature.pm <- count(hp.df, c('post.date.month',' nature'))
to.plot <- nature.pm[which(nature.pm$post.date.month == as.Date(paste(substring(as.character(plot.month), 1, 7), "01", sep = "-" ))),] ###
to.plot$nature <- factor(to.plot$nature)
plot.order <- order(to.plot$freq, decreasing = T)
to.plot <- to.plot[plot.order,]
to.plot <- to.plot[1:5,]
nature.plot <- ggplot()+
geom_bar(data = to.plot, aes(x = reorder(nature, freq), y = freq, fill = freq), stat = "identity", position = "dodge")+
coord_flip() +
xlab("") +
ylab("Frequency")+
ggtitle(paste("Top 5 natures of", nature, sep = " "))+
theme(legend.position="none")+
scale_fill_gradient(low = "black", high = if(nature == "Complaint") "red" else "blue")
return(nature.plot)
}
insurer
insurer <- "Mom"
nature <- "Complaint"
hp.df <-  HP.data
hp.df <- hp.df[which(hp.df$Insurer == insurer),]
hp.df$post.date.month <- as.Date(paste(substring(as.character(hp.df$post.date), 1, 7), "01", sep = "-" ))
hp.df <- hp.df[which(hp.df$type == nature),]
head(hp.df)
nature.pm <- count(hp.df, c('post.date.month',' nature'))
nature.pm
to.plot <- nature.pm[which(nature.pm$post.date.month == as.Date(paste(substring(as.character(plot.month), 1, 7), "01", sep = "-" ))),] ###
to.plot$nature <- factor(to.plot$nature)
plot.order <- order(to.plot$freq, decreasing = T)
to.plot <- to.plot[plot.order,]
to.plot <- to.plot[1:5,]
plot.month <- "2015-03-04"
nature.pm[which(nature.pm$post.date.month == as.Date(paste(substring(as.character(plot.month), 1, 7), "01", sep = "-" ))),]
to.plot <- nature.pm[which(nature.pm$post.date.month == as.Date(paste(substring(as.character(plot.month), 1, 7), "01", sep = "-" ))),] ###
to.plot$nature <- factor(to.plot$nature)
plot.order <- order(to.plot$freq, decreasing = T)
to.plot <- to.plot[plot.order,]
to.plot <- to.plot[1:5,]
ggplot()+
geom_bar(data = to.plot, aes(x = reorder(nature, freq), y = freq, fill = freq), stat = "identity", position = "dodge")+
coord_flip() +
xlab("") +
ylab("Frequency")+
ggtitle(paste("Top 5 natures of", nature, sep = " "))+
theme(legend.position="none")+
scale_fill_gradient(low = "black", high = if(nature == "Complaint") "red" else "blue")
shiny::runApp()
shiny::runApp()
nature <- function(hp.df, plot.month, nature) {
hp.df <- hp.df[which(hp.df$Insurer == insurer),]
hp.df$post.date.month <- as.Date(paste(substring(as.character(hp.df$post.date), 1, 7), "01", sep = "-" ))
hp.df <- hp.df[which(hp.df$type == nature),]
nature.pm <- count(hp.df, c('post.date.month',' nature'))
to.plot <- nature.pm[which(nature.pm$post.date.month == as.Date(paste(substring(as.character(plot.month), 1, 7), "01", sep = "-" ))),] ###
to.plot$nature <- factor(to.plot$nature)
plot.order <- order(to.plot$freq, decreasing = T)
to.plot <- to.plot[plot.order,]
to.plot <- to.plot[1:5,]
nature.plot <- ggplot()+
geom_bar(data = to.plot, aes(x = reorder(nature, freq), y = freq, fill = freq), stat = "identity", position = "dodge")+
coord_flip() +
xlab("") +
ylab("Frequency")+
ggtitle(paste("Top 5 natures of", nature, sep = " "))+
theme(legend.position="none")+
scale_fill_gradient(low = "black", high = if(nature == "Complaint") "red" else "blue")
return(nature.plot)
}
nature(HP.data, "2015-03-06", "Compliment" )
shiny::runApp()
shiny::runApp()
?renderTable
?tableOutput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
month <- "2015-03-06"
hp1 <- hp.df[which(substring(as.POSIXct.numeric(HP.data$post.date, origin = "1970-01-01"), 1, 7) == substring(as.character(month), 1,7) &
HP.data$response.date > 0),]
str(hp.df)
substring(as.character(month), 1,7)
substring(hp.df$post.date.month, 1, 7)
which(substring(hp.df$post.date.month, 1, 7) == substring(as.character(month), 1,7)
)
head(hp.df)
nrow(hp.df)
hp.df <- HP.data
nrow(hp.df)
which(substring(hp.df$post.date.month, 1, 7) == substring(as.character(month), 1,7))
substring(hp.df$post.date.month, 1, 7)
str(hp.df)
hp1
Mom <- readRDS(file.path(getwd(),"data/Momentum.RDS"))
MomHealth <- readRDS(file.path(getwd(),"data/Momentum Health.RDS"))
MSTI <- readRDS(file.path(getwd(),"data/Momentum Short Term.RDS"))
DiscHealth <- readRDS(file.path(getwd(),"data/Discovery Health.RDS"))
DiscLife <- readRDS(file.path(getwd(),"data/Discovery Life.RDS"))
DiscInsure <- readRDS(file.path(getwd(),"data/Discovery Insure.RDS"))
Liberty <- readRDS(file.path(getwd(),"data/Liberty.RDS"))
Metropolitan <- readRDS(file.path(getwd(),"data/Metropolitan.RDS"))
OutSurance <- readRDS(file.path(getwd(),"data/OutSurance.RDS"))
#MiWay <- readRDS(file.path(getwd(),"data/MiWay.RDS"))
#setwd("C:/Users/Veldrin/Documents/GitHub/HelloPeter/shiny")
HP.data <- rbind(Mom,
MomHealth,
MSTI,
DiscHealth,
DiscLife,
DiscInsure,
Liberty,
Metropolitan,
OutSurance)
HP.data$response.date <- as.POSIXct.numeric(HP.data$response.date, origin = "1970-01-01", tz = "GMT")
HP.data$post.date <- as.POSIXct.numeric(HP.data$post.date, origin = "1970-01-01", tz = "GMT")
HP.data$response.delay <- round(difftime(HP.data$response.date,
HP.data$post.date,
units = "hours",
tz = "GMT"),4)
HP.data$post.date.month <- as.Date(paste(substring(as.character(HP.data$post.date), 1, 7), "01", sep = "-" ))
hp.df <-HP.data
hp1 <- hp.df[which(substring(hp.df$post.date.month, 1, 7) == substring(as.character(month), 1,7) &
HP.data$response.date > 0),]
str(hp1)
nrow(hp1)
insurers <- c("Momentum", "MSTI", "Liberty")
which(hp.df$Insurer %in% insurers)
hp1$Insurer[which(hp.df$Insurer %in% insurers)]
hp1$Insurer[which(hp1$Insurer %in% insurers)]
hp1[which(hp1$Insurer %in% insurers)]
str(hp1)
hp1[which(hp1$Insurer %in% insurers),1:6]
str(hp1)
summarytable <- function(hp.df, insurers, month) {
hp1 <- hp.df[which(substring(hp.df$post.date.month, 1, 7) == substring(as.character(month), 1,7) &
HP.data$response.date > 0),]
hp1 <- hp1[which(hp1$Insurer %in% insurers)]
response.time <- aggregate(data = hp1, response.delay ~ Insurer.proper.name , FUN = mean)
summary <- as.data.frame.matrix(table(hp1[,c('Insurer.proper.name', 'type')]))
summary$Compliment.Ratio <- percent(summary$Compliment/ (summary$Complaint + summary$Compliment))
summary$Conversion.Ratio <- percent(summary$Conversion/ summary$Complaint)
summary$Pname <- rownames(summary)
summary.table <- merge(summary, response.time, by.x = 'Pname', by.y = 'Insurer.proper.name')
colnames(summary.table) <- c("Insurer", "Complaints", "Compliments", "Conversions", "Compliment ratio", "Conversion ratio", "Response time (hours)")
return(summary.table[order((summary.table$Complaints + summary.table$Compliments), decreasing = T),])
}
summarytable(HP.data, insurers, "2015-03-09")
str(HP.data)
summarytable <- function(hp.df, insurers, month) {
hp1 <- hp.df[which(substring(hp.df$post.date.month, 1, 7) == substring(as.character(month), 1,7) &
HP.data$response.date > 0),]
hp1 <- hp1[which(hp1$Insurer %in% insurers),]
response.time <- aggregate(data = hp1, response.delay ~ Insurer.proper.name , FUN = mean)
summary <- as.data.frame.matrix(table(hp1[,c('Insurer.proper.name', 'type')]))
summary$Compliment.Ratio <- percent(summary$Compliment/ (summary$Complaint + summary$Compliment))
summary$Conversion.Ratio <- percent(summary$Conversion/ summary$Complaint)
summary$Pname <- rownames(summary)
summary.table <- merge(summary, response.time, by.x = 'Pname', by.y = 'Insurer.proper.name')
colnames(summary.table) <- c("Insurer", "Complaints", "Compliments", "Conversions", "Compliment ratio", "Conversion ratio", "Response time (hours)")
return(summary.table[order((summary.table$Complaints + summary.table$Compliments), decreasing = T),])
}
summarytable(HP.data, insurers, "2015-03-09")
insurers
hp.df <- HP.data
hp1 <- hp.df[which(substring(hp.df$post.date.month, 1, 7) == substring(as.character(month), 1,7) &
HP.data$response.date > 0),]
hp1 <- hp1[which(hp1$Insurer %in% insurers),]
unique(hp1$Insurer)
hp1 <- hp.df[which(substring(hp.df$post.date.month, 1, 7) == substring(as.character(month), 1,7) &
HP.data$response.date > 0),]
unique(hp1$Insurer)
unique(hp.df$Insurer)
unique(HP.data$Insurer)
Mom <- readRDS(file.path(getwd(),"data/Momentum.RDS"))
MomHealth <- readRDS(file.path(getwd(),"data/Momentum Health.RDS"))
MSTI <- readRDS(file.path(getwd(),"data/Momentum Short Term.RDS"))
DiscHealth <- readRDS(file.path(getwd(),"data/Discovery Health.RDS"))
DiscLife <- readRDS(file.path(getwd(),"data/Discovery Life.RDS"))
DiscInsure <- readRDS(file.path(getwd(),"data/Discovery Insure.RDS"))
Liberty <- readRDS(file.path(getwd(),"data/Liberty.RDS"))
Metropolitan <- readRDS(file.path(getwd(),"data/Metropolitan.RDS"))
OutSurance <- readRDS(file.path(getwd(),"data/OutSurance.RDS"))
#MiWay <- readRDS(file.path(getwd(),"data/MiWay.RDS"))
#setwd("C:/Users/Veldrin/Documents/GitHub/HelloPeter/shiny")
HP.data <- rbind(Mom,
MomHealth,
MSTI,
DiscHealth,
DiscLife,
DiscInsure,
Liberty,
Metropolitan,
OutSurance)
unique(HP.data$Insurer)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
summary.table
summary.table <- merge(summary, response.time, by.x = 'Pname', by.y = 'Insurer.proper.name')
hp1 <- hp.df[which(substring(hp.df$post.date.month, 1, 7) == substring(as.character(month), 1,7) &
HP.data$response.date > 0),]
hp1 <- hp1[which(hp1$Insurer %in% insurers),]
response.time <- aggregate(data = hp1, response.delay ~ Insurer.proper.name , FUN = mean)
summary <- as.data.frame.matrix(table(hp1[,c('Insurer.proper.name', 'type')]))
summary$Compliment.Ratio <- percent(summary$Compliment/ (summary$Complaint + summary$Compliment))
summary$Conversion.Ratio <- percent(summary$Conversion/ summary$Complaint)
summary$Pname <- rownames(summary)
summary.table <- merge(summary, response.time, by.x = 'Pname', by.y = 'Insurer.proper.name')
colnames(summary.table) <- c("Insurer", "Complaints", "Compliments", "Conversions", "Compliment ratio", "Conversion ratio", "Response time (hours)")
summary.table[order((summary.table$Complaints + summary.table$Compliments), decreasing = T),]
?merge
summary
response.time
summary.table[order((summary.table$Complaints + summary.table$Compliments), decreasing = T),]
?return
shiny::runApp()
