alpha = .8,
lty = "solid")+
geom_line(data = combined[combined$type == "forecast",],
aes(x = date, y = value),
lwd= 1,
col = "#003366",
alpha = .8,
lty = "solid")+
geom_line(data = combined, aes(x = date, y = bench), lwd= 1, lty = "dotted" )+
xlab("Red: Observed | Blue: Forecasted")+
ggtitle(paste("Account no: ",acc.numbers[i] , sep = ""))+
theme(axis.title.y = element_blank())+
annotate("Benchmark", x = min(combined$date), y = bench)
ggplot() +
geom_rect(data = combined, xmin = -Inf, xmax = Inf, ymin =  as.numeric(quantile(combined$value, 0.95)), ymax = Inf, fill = "#dc291e", alpha = .005, inherit.aes= F)+
geom_line(data = combined[combined$type == "observed",],
aes(x = date, y = value),
lwd= 1,
col = "#cd291e",
alpha = .8,
lty = "solid")+
geom_line(data = combined[combined$type == "forecast",],
aes(x = date, y = value),
lwd= 1,
col = "#003366",
alpha = .8,
lty = "solid")+
geom_line(data = combined, aes(x = date, y = bench), lwd= 1, lty = "dotted" )+
xlab("Red: Observed | Blue: Forecasted")+
ggtitle(paste("Account no: ",acc.numbers[i] , sep = ""))+
theme(axis.title.y = element_blank())+
annotate("text", x = min(combined$date), y = bench, label = "Benchmark")
bench
plots[[k]] <- ggplot() +
geom_rect(data = combined, xmin = -Inf, xmax = Inf, ymin =  as.numeric(quantile(combined$value, 0.95)), ymax = Inf, fill = "#dc291e", alpha = .005, inherit.aes= F)+
geom_line(data = combined[combined$type == "observed",],
aes(x = date, y = value),
lwd= 1,
col = "#cd291e",
alpha = .8,
lty = "solid")+
geom_line(data = combined[combined$type == "forecast",],
aes(x = date, y = value),
lwd= 1,
col = "#003366",
alpha = .8,
lty = "solid")+
geom_line(data = combined, aes(x = date, y = bench), lwd= 1, lty = "dotted" )+
xlab("Red: Observed | Blue: Forecasted")+
ggtitle(paste("Account no: ",acc.numbers[i] , sep = ""))+
theme(axis.title.y = element_blank())+
annotate("text", x = min(combined$date), y = bench, label = "Benchmark")
p[[4]]
plots[[4]]
k
plots[[24]]
k <- 1
for (i in which(rowcount != 0)) {
bench <- benchmarks$MSBENCH[benchmarks$MSBANO == acc.numbers[i]]
new.existing <- status[[i]]$MSCOUNT[which(status[[i]]$MSTYPE == "ALLOC")]
dates <- status[[i]]$MSDATE[which(status[[i]]$MSTYPE == "ALLOC")]
new.ts <- ts(data = new.existing)
fit=Arima(new.ts,seasonal=list(order=c(0,1,0),period=30),include.drift=T)
ts.fc <- forecast(fit, h = 30)
combined <- data.frame(type = c(rep("observed", length(ts.fc[[7]])), rep("forecast", length(ts.fc[[4]]))) , value = c(ts.fc[[7]], ts.fc[[4]]))
new.dates <- dates
for ( i in (length(dates)+ 1):nrow(combined) ) {
new.dates[i] <- new.dates[i-1] + if(weekdays(new.dates[i-1]) == "Friday")  3 else 1
}
combined$date <- new.dates
combined$bench <- bench
ggplot(combined) + geom_line(aes(x = date, y = value, col = type))
plots[[k]] <- ggplot() +
geom_rect(data = combined, xmin = -Inf, xmax = Inf, ymin =  as.numeric(quantile(combined$value, 0.95)), ymax = Inf, fill = "#dc291e", alpha = .005, inherit.aes= F)+
geom_line(data = combined[combined$type == "observed",],
aes(x = date, y = value),
lwd= 1,
col = "#cd291e",
alpha = .8,
lty = "solid")+
geom_line(data = combined[combined$type == "forecast",],
aes(x = date, y = value),
lwd= 1,
col = "#003366",
alpha = .8,
lty = "solid")+
geom_line(data = combined, aes(x = date, y = bench), lwd= 1, lty = "dotted" )+
xlab("Red: Observed | Blue: Forecasted")+
ggtitle(paste("Account no: ",acc.numbers[i] , sep = ""))+
theme(axis.title.y = element_blank())+
annotate("text", x = min(combined$date), y = bench, label = "Benchmark")
k <- k + 1
}
plots[24]
plots[[4]]
?annotate
ggplot() +
geom_rect(data = combined, xmin = -Inf, xmax = Inf, ymin =  as.numeric(quantile(combined$value, 0.95)), ymax = Inf, fill = "#dc291e", alpha = .005, inherit.aes= F)+
geom_line(data = combined[combined$type == "observed",],
aes(x = date, y = value),
lwd= 1,
col = "#cd291e",
alpha = .8,
lty = "solid")+
geom_line(data = combined[combined$type == "forecast",],
aes(x = date, y = value),
lwd= 1,
col = "#003366",
alpha = .8,
lty = "solid")+
geom_line(data = combined, aes(x = date, y = bench), lwd= 1, lty = "dotted" )+
xlab("Red: Observed | Blue: Forecasted")+
ggtitle(paste("Account no: ",acc.numbers[i] , sep = ""))+
theme(axis.title.y = element_blank())+
annotate("text", x = min(combined$date), y = bench, label = "Benchmark", col = "red")
?text
?geom_text
ggplot() +
geom_rect(data = combined, xmin = -Inf, xmax = Inf, ymin =  as.numeric(quantile(combined$value, 0.95)), ymax = Inf, fill = "#dc291e", alpha = .005, inherit.aes= F)+
geom_line(data = combined[combined$type == "observed",],
aes(x = date, y = value),
lwd= 1,
col = "#cd291e",
alpha = .8,
lty = "solid")+
geom_line(data = combined[combined$type == "forecast",],
aes(x = date, y = value),
lwd= 1,
col = "#003366",
alpha = .8,
lty = "solid")+
geom_line(data = combined, aes(x = date, y = bench), lwd= 1, lty = "dotted" )+
xlab("Red: Observed | Blue: Forecasted")+
ggtitle(paste("Account no: ",acc.numbers[i] , sep = ""))+
theme(axis.title.y = element_blank())+
annotate("text", x = min(combined$date), y = bench, label = "Benchmark", col = "red", fontface = "bold")
ggplot() +
geom_rect(data = combined, xmin = -Inf, xmax = Inf, ymin =  as.numeric(quantile(combined$value, 0.95)), ymax = Inf, fill = "#dc291e", alpha = .005, inherit.aes= F)+
geom_line(data = combined[combined$type == "observed",],
aes(x = date, y = value),
lwd= 1,
col = "#cd291e",
alpha = .8,
lty = "solid")+
geom_line(data = combined[combined$type == "forecast",],
aes(x = date, y = value),
lwd= 1,
col = "#003366",
alpha = .8,
lty = "solid")+
geom_line(data = combined, aes(x = date, y = bench), lwd= 1, lty = "dotted" )+
xlab("Red: Observed | Blue: Forecasted")+
ggtitle(paste("Account no: ",acc.numbers[i] , sep = ""))+
theme(axis.title.y = element_blank())+
annotate("text", x = min(combined$date), y = bench, label = "Benchmark", fontface = "bold")
ggplot() +
geom_rect(data = combined, xmin = -Inf, xmax = Inf, ymin =  as.numeric(quantile(combined$value, 0.95)), ymax = Inf, fill = "#dc291e", alpha = .005, inherit.aes= F)+
geom_line(data = combined[combined$type == "observed",],
aes(x = date, y = value),
lwd= 1,
col = "#cd291e",
alpha = .8,
lty = "solid")+
geom_line(data = combined[combined$type == "forecast",],
aes(x = date, y = value),
lwd= 1,
col = "#003366",
alpha = .8,
lty = "solid")+
geom_line(data = combined, aes(x = date, y = bench), lwd= 1, lty = "dotted" )+
xlab("Red: Observed | Blue: Forecasted")+
ggtitle(paste("Account no: ",acc.numbers[i] , sep = ""))+
theme(axis.title.y = element_blank())+
annotate("text", x = min(combined$date), y = bench, label = "Benchmark", fontface = "bold")+
annotate("text", x = min(combined$date), y = as.numeric(quantile(combined$value, 0.95)), label = "95% percentile", fontface = "bold", col = "red")
ggplot() +
geom_rect(data = combined, xmin = -Inf, xmax = Inf, ymin =  as.numeric(quantile(combined$value, 0.95)), ymax = Inf, fill = "#dc291e", alpha = .005, inherit.aes= F)+
geom_line(data = combined[combined$type == "observed",],
aes(x = date, y = value),
lwd= 1,
col = "#cd291e",
alpha = .8,
lty = "solid")+
geom_line(data = combined[combined$type == "forecast",],
aes(x = date, y = value),
lwd= 1,
col = "#003366",
alpha = .8,
lty = "solid")+
geom_line(data = combined, aes(x = date, y = bench), lwd= 1, lty = "dotted" )+
xlab("Red: Observed | Blue: Forecasted")+
ggtitle(paste("Account no: ",acc.numbers[i] , sep = ""))+
theme(axis.title.y = element_blank())+
annotate("text", x = min(combined$date), y = bench, label = "Benchmark", fontface = "bold")+
annotate("text", x = min(combined$date), y = as.numeric(quantile(combined$value, 0.95)), label = "95% percentile", fontface = "bold", col = "red",hjust = 1)
ggplot() +
geom_rect(data = combined, xmin = -Inf, xmax = Inf, ymin =  as.numeric(quantile(combined$value, 0.95)), ymax = Inf, fill = "#dc291e", alpha = .005, inherit.aes= F)+
geom_line(data = combined[combined$type == "observed",],
aes(x = date, y = value),
lwd= 1,
col = "#cd291e",
alpha = .8,
lty = "solid")+
geom_line(data = combined[combined$type == "forecast",],
aes(x = date, y = value),
lwd= 1,
col = "#003366",
alpha = .8,
lty = "solid")+
geom_line(data = combined, aes(x = date, y = bench), lwd= 1, lty = "dotted" )+
xlab("Red: Observed | Blue: Forecasted")+
ggtitle(paste("Account no: ",acc.numbers[i] , sep = ""))+
theme(axis.title.y = element_blank())+
annotate("text", x = min(combined$date), y = bench, label = "Benchmark", fontface = "bold")+
annotate("text", x = min(combined$date), y = as.numeric(quantile(combined$value, 0.95)), label = "95% percentile", fontface = "bold", col = "red",hjust = 0)
ggplot() +
geom_rect(data = combined, xmin = -Inf, xmax = Inf, ymin =  as.numeric(quantile(combined$value, 0.95)), ymax = Inf, fill = "#dc291e", alpha = .005, inherit.aes= F)+
geom_line(data = combined[combined$type == "observed",],
aes(x = date, y = value),
lwd= 1,
col = "#cd291e",
alpha = .8,
lty = "solid")+
geom_line(data = combined[combined$type == "forecast",],
aes(x = date, y = value),
lwd= 1,
col = "#003366",
alpha = .8,
lty = "solid")+
geom_line(data = combined, aes(x = date, y = bench), lwd= 1, lty = "dotted" )+
xlab("Red: Observed | Blue: Forecasted")+
ggtitle(paste("Account no: ",acc.numbers[i] , sep = ""))+
theme(axis.title.y = element_blank())+
annotate("text", x = min(combined$date), y = bench, label = "Benchmark", fontface = "bold", hjust = 0)+
annotate("text", x = min(combined$date), y = as.numeric(quantile(combined$value, 0.95)), label = "95% percentile", fontface = "bold", col = "red",hjust = 0)
k <- 1
for (i in which(rowcount != 0)) {
bench <- benchmarks$MSBENCH[benchmarks$MSBANO == acc.numbers[i]]
new.existing <- status[[i]]$MSCOUNT[which(status[[i]]$MSTYPE == "ALLOC")]
dates <- status[[i]]$MSDATE[which(status[[i]]$MSTYPE == "ALLOC")]
new.ts <- ts(data = new.existing)
fit=Arima(new.ts,seasonal=list(order=c(0,1,0),period=30),include.drift=T)
ts.fc <- forecast(fit, h = 30)
combined <- data.frame(type = c(rep("observed", length(ts.fc[[7]])), rep("forecast", length(ts.fc[[4]]))) , value = c(ts.fc[[7]], ts.fc[[4]]))
new.dates <- dates
for ( i in (length(dates)+ 1):nrow(combined) ) {
new.dates[i] <- new.dates[i-1] + if(weekdays(new.dates[i-1]) == "Friday")  3 else 1
}
combined$date <- new.dates
combined$bench <- bench
ggplot(combined) + geom_line(aes(x = date, y = value, col = type))
plots[[k]] <- ggplot() +
geom_rect(data = combined, xmin = -Inf, xmax = Inf, ymin =  as.numeric(quantile(combined$value, 0.95)), ymax = Inf, fill = "#dc291e", alpha = .005, inherit.aes= F)+
geom_line(data = combined[combined$type == "observed",],
aes(x = date, y = value),
lwd= 1,
col = "#cd291e",
alpha = .8,
lty = "solid")+
geom_line(data = combined[combined$type == "forecast",],
aes(x = date, y = value),
lwd= 1,
col = "#003366",
alpha = .8,
lty = "solid")+
geom_line(data = combined, aes(x = date, y = bench), lwd= 1, lty = "dotted" )+
xlab("Red: Observed | Blue: Forecasted")+
ggtitle(paste("Account no: ",acc.numbers[i] , sep = ""))+
theme(axis.title.y = element_blank())+
annotate("text", x = min(combined$date), y = bench, label = "Benchmark", fontface = "bold", hjust = 0)+
annotate("text", x = min(combined$date), y = as.numeric(quantile(combined$value, 0.95)), label = "95% percentile", fontface = "bold", col = "red",hjust = 0)
k <- k + 1
}
plots[[4]]
plots[[5]]
plots[[6]]
plots[[7]]
k <- 1
for (i in which(rowcount != 0)) {
bench <- benchmarks$MSBENCH[benchmarks$MSBANO == acc.numbers[i]]
new.existing <- status[[i]]$MSCOUNT[which(status[[i]]$MSTYPE == "ALLOC")]
dates <- status[[i]]$MSDATE[which(status[[i]]$MSTYPE == "ALLOC")]
new.ts <- ts(data = new.existing)
fit=Arima(new.ts,seasonal=list(order=c(0,1,0),period=30),include.drift=T)
ts.fc <- forecast(fit, h = 60)
combined <- data.frame(type = c(rep("observed", length(ts.fc[[7]])), rep("forecast", length(ts.fc[[4]]))) , value = c(ts.fc[[7]], ts.fc[[4]]))
new.dates <- dates
for ( i in (length(dates)+ 1):nrow(combined) ) {
new.dates[i] <- new.dates[i-1] + if(weekdays(new.dates[i-1]) == "Friday")  3 else 1
}
combined$date <- new.dates
combined$bench <- bench
ggplot(combined) + geom_line(aes(x = date, y = value, col = type))
plots[[k]] <- ggplot() +
geom_rect(data = combined, xmin = -Inf, xmax = Inf, ymin =  as.numeric(quantile(combined$value, 0.9)), ymax = Inf, fill = "#dc291e", alpha = .005, inherit.aes= F)+
geom_line(data = combined[combined$type == "observed",],
aes(x = date, y = value),
lwd= 1,
col = "#cd291e",
alpha = .8,
lty = "solid")+
geom_line(data = combined[combined$type == "forecast",],
aes(x = date, y = value),
lwd= 1,
col = "#003366",
alpha = .8,
lty = "solid")+
geom_line(data = combined, aes(x = date, y = bench), lwd= 1, lty = "dotted" )+
xlab("Red: Observed | Blue: Forecasted")+
ggtitle(paste("Account no: ",acc.numbers[i] , sep = ""))+
theme(axis.title.y = element_blank())+
annotate("text", x = min(combined$date), y = bench, label = "Benchmark", fontface = "bold", hjust = 0)+
annotate("text", x = min(combined$date), y = as.numeric(quantile(combined$value, 0.9)), label = "90% percentile", fontface = "bold",hjust = 0)
k <- k + 1
}
plots[[4]]
ggplot() +
geom_rect(data = combined, xmin = -Inf, xmax = Inf, ymin =  as.numeric(quantile(combined$value, 0.9)), ymax = Inf, fill = "#dc291e", alpha = .005, inherit.aes= F)+
geom_line(data = combined[combined$type == "observed",],
aes(x = date, y = value),
lwd= 1,
col = "#cd291e",
alpha = .8,
lty = "solid")+
geom_line(data = combined[combined$type == "forecast",],
aes(x = date, y = value),
lwd= 1,
col = "#003366",
alpha = .8,
lty = "solid")+
geom_line(data = combined, aes(x = date, y = bench), lwd= 1, lty = "dotted" )+
xlab("Red: Observed | Blue: Forecasted")+
ggtitle(paste("Account no: ",acc.numbers[i] , sep = ""))+
theme(axis.title.y = element_blank())+
annotate("text", x = min(combined$date), y = bench, label = "Benchmark", fontface = "bold", hjust = 0, fill = "black")+
annotate("text", x = min(combined$date), y = as.numeric(quantile(combined$value, 0.9)), label = "90% percentile", fontface = "bold",hjust = 0)
write.csv(eor, "eor.csv")
write.csv(benchmark, "bench.csv")
write.csv(benchmarks, "bench.csv")
hp.df
insurars <- c(MomHealth, Momentum, MSTI,
DiscHealth, DiscLife, DiscInsure,
OM,
LibertyLife,
Metro,
Outsurance,
Miway)
MomHealth <- "http://hellopeter.com/momentum-health/compliments-and-complaints?country=South%20Africa&pg="
Momentum <- "http://hellopeter.com/momentum/compliments-and-complaints?country=South%20Africa&pg="
MSTI <- "http://hellopeter.com/momentum-short-term-insurance/compliments-and-complaints?country=South%20Africa&pg="
# Discovery
DiscHealth <- "http://hellopeter.com/discovery-health/compliments-and-complaints?country=South%20Africa&pg="
DiscLife <- "http://hellopeter.com/discovery-life/compliments-and-complaints?country=South%20Africa&pg="
DiscInsure <- "http://hellopeter.com/discovery-insure/compliments-and-complaints?country=South%20Africa&pg="
# Old Mutual
OM <- "http://hellopeter.com/old-mutual/compliments-and-complaints?country=South%20Africa&pg="
#Liberty
LibertyLife <- "http://hellopeter.com/liberty-life/compliments-and-complaints?country=South%20Africa&pg="
# Metropolitan
Metro <- "http://hellopeter.com/metropolitan-life/compliments-and-complaints?country=South%20Africa&pg="
#Outsurance
Outsurance <- "http://hellopeter.com/outsurance/compliments-and-complaints?country=South%20Africa&pg="
#MiWay
Miway <- "http://hellopeter.com/miway/compliments-and-complaints?country=South%20Africa&pg="
insurars <- c(MomHealth, Momentum, MSTI,
DiscHealth, DiscLife, DiscInsure,
OM,
LibertyLife,
Metro,
Outsurance,
Miway)
insurars[1]
insurars[2]
length(insurars)
post
h <- 1
i <- 1
hp <- c()
link <- data.frame()
title <- data.frame()
time <- data.frame()
type <- data.frame()
postbody <- data.frame()
response.date <- data.frame()
all.data <- list()
hp[1] <- httpGET(paste(insurars[h], 1, sep = ""))
require(RCurl)
require(XML)
require(wordcloud)
require(plyr)
hp[1] <- httpGET(paste(insurars[h], 1, sep = ""))
linklocations <- gregexpr("<div class=\"td-item2\"><a class=\"fb-link\"", hp[i])
for (j in 1:length(linklocations[[1]])) {
#gets URL
snippet <- substring(hp[i],
linklocations[[1]][j],
if (j == length(linklocations[[1]])) nchar(hp[i]) else linklocations[[1]][j+1])
# Link
link[j,i] <- substring(snippet, gregexpr("href=\"",snippet)[[1]][1] + 6,gregexpr(" title=\"",snippet)[[1]][1]-2)
# Title
a <- gregexpr("title=\"",snippet)[[1]][1] + 7
b <- min(gregexpr("\">",snippet)[[1]][which(gregexpr("\">",snippet)[[1]] > gregexpr("title=\"",snippet)[[1]][1] + 7)])-1
title[j,i] <- substring(snippet, a, b)
# Time of post
a <- gregexpr("\">\t",snippet)[[1]][1] + 7
b <- min(gregexpr("\t",snippet)[[1]][which(gregexpr("\t",snippet)[[1]] > gregexpr("\">\t",snippet)[[1]][1] + 7)])-1
time[j,i] <- as.character(as.Date(trim.leading(substring(snippet, a, b)), format = "%H:%M:%S %A %d %b %y"))
# Type of post
if (regexpr("complaints/", link[j,i], ignore.case = T) != -1) type[j,i] <- "Complaint"
if (regexpr("complaints-to-compliments/", link[j,i], ignore.case = T) != -1) type[j,i] <- "Convertion"
if (regexpr("compliments/", link[j,i], ignore.case = T) != -1) type[j,i] <- "Compliment"
# Response time
if (!is.na(link[j,i])) {
post <- httpGET(link[j,i])
a <- min(gregexpr("SUPPLIER'S RESPONSE", post)[[1]])
if (a == -1)  response.date[j,i] <- 0 else {
b <- min(gregexpr("[0-9]{2}:[0-9]{2}:[0-9]{2}", substring(post, a, a + 500))[[1]])
c <- min(gregexpr("</td>", substring(post, a + b , a + b + 60))[[1]])
d <- substring(post, a + b + 10, a +  b + c + 8)
e <- as.Date(as.character(d), format = "%a %d %b %y")
response.date[j,i] <- as.character(e)}
}
#Nature
print(c(i,j))
}
trim.leading <- function (x)  sub("^\\s+", "", x)
trim.trailing <- function (x) sub("\\s+$", "", x)
cleanFun <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
linklocations <- gregexpr("<div class=\"td-item2\"><a class=\"fb-link\"", hp[i])
for (j in 1:length(linklocations[[1]])) {
#gets URL
snippet <- substring(hp[i],
linklocations[[1]][j],
if (j == length(linklocations[[1]])) nchar(hp[i]) else linklocations[[1]][j+1])
# Link
link[j,i] <- substring(snippet, gregexpr("href=\"",snippet)[[1]][1] + 6,gregexpr(" title=\"",snippet)[[1]][1]-2)
# Title
a <- gregexpr("title=\"",snippet)[[1]][1] + 7
b <- min(gregexpr("\">",snippet)[[1]][which(gregexpr("\">",snippet)[[1]] > gregexpr("title=\"",snippet)[[1]][1] + 7)])-1
title[j,i] <- substring(snippet, a, b)
# Time of post
a <- gregexpr("\">\t",snippet)[[1]][1] + 7
b <- min(gregexpr("\t",snippet)[[1]][which(gregexpr("\t",snippet)[[1]] > gregexpr("\">\t",snippet)[[1]][1] + 7)])-1
time[j,i] <- as.character(as.Date(trim.leading(substring(snippet, a, b)), format = "%H:%M:%S %A %d %b %y"))
# Type of post
if (regexpr("complaints/", link[j,i], ignore.case = T) != -1) type[j,i] <- "Complaint"
if (regexpr("complaints-to-compliments/", link[j,i], ignore.case = T) != -1) type[j,i] <- "Convertion"
if (regexpr("compliments/", link[j,i], ignore.case = T) != -1) type[j,i] <- "Compliment"
# Response time
if (!is.na(link[j,i])) {
post <- httpGET(link[j,i])
a <- min(gregexpr("SUPPLIER'S RESPONSE", post)[[1]])
if (a == -1)  response.date[j,i] <- 0 else {
b <- min(gregexpr("[0-9]{2}:[0-9]{2}:[0-9]{2}", substring(post, a, a + 500))[[1]])
c <- min(gregexpr("</td>", substring(post, a + b , a + b + 60))[[1]])
d <- substring(post, a + b + 10, a +  b + c + 8)
e <- as.Date(as.character(d), format = "%a %d %b %y")
response.date[j,i] <- as.character(e)}
}
#Nature
print(c(i,j))
}
ggplot()+
geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")+
scale_fill_brewer(palette = "Set1")
#
require(ggplot2)
ggplot()+
geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")+
scale_fill_brewer(palette = "Set1")
#
shiny::runApp('C:/Users/anmarais/Desktop/GitHub/HelloPeter/shiny')
shiny::runApp('C:/Users/anmarais/Desktop/GitHub/HelloPeter/shiny')
shiny::runApp('C:/Users/anmarais/Desktop/GitHub/HelloPeter/shiny')
shiny::runApp('C:/Users/anmarais/Desktop/GitHub/HelloPeter/shiny')
getwd()
setwd("C:/Users/anmarais/Desktop/GitHub/HelloPeter/shiny")
hp.stats <- readRDS(file.path(getwd(),"data/hp.RDS"))
hp.stats <- readRDS(file.path(getwd(),"data/hp.RDS"))[[1]]
shiny::runApp()
readRDS(file.path(getwd(),"data/hp.RDS"))[[1]]
hp.stats <- readRDS(file.path(getwd(),"data/hp.RDS"))[[2]]
readRDS(file.path(getwd(),"data/hp.RDS"))[[2]]
shiny::runApp()
# from <-
df1 <- hp.stats
hp.df <- data.frame(df1)
hp.df$response.date <- as.Date(hp.df$response.date)
hp.df$post.date <- as.Date(hp.df$post.date)
hp.df <- hp.df[which(hp.df$post.date < paste(substring(as.character(Sys.Date()), 1, 7), "01", sep = "-" ) &
hp.df$post.date > from),]
hp.df$response.time <- hp.df$response.date - hp.df$post.date
hp.df$post.date.month <- as.Date(paste(substring(as.character(hp.df$post.date), 1, 7), "01", sep = "-" ))
#hp.monthly <- data.frame(count(hp.df, c('post.date.month','type')))
#
#
#
#   hp.count <- count(hp.df, c('post.date', 'type'))
#   ave.time.pm <- aggregate(data = hp.df, response.time ~ post.date.month, FUN = mean)
#   nature.count <- count(hp.df, c('post.date.month', 'nature'))
#
#
#
hp.monthly <- aggregate(data = hp.df,  rownames(hp.df) ~ type + post.date.month, FUN = length)
colnames(hp.monthly) <- c("type", "post.date.month", "freq")
ggplot()+
geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")
shiny::runApp()
ggplot(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type))+
geom_bar(stat = "identity", position = "dodge")
